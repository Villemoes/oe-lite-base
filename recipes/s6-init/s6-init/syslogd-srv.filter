#!/usr/bin/awk -f
#
# While sed seems a saner choice, it turns out to be unsuitable for
# "live" log filtering, since it (at least busybox sed) reads line n+1
# before processing, let alone printing, line n.
#
# We want to do perl -pe 's/^(<[0-9]{1,3}>)regexp-matching-date /$1/'
# . Lacking back-references, we cheat and double the facility/level
# part so we can remove one copy of it. Lines not matching this
# pattern are passed through as-is, except that we also filter away
# empty lines.
#
# While busybox awk apparently always uses _IONBF or _IOLBF for its
# stdout, GNU awk does buffer stdout when it is connected to a
# pipe. Both support the fflush() function, which is now also
# standardized in POSIX. Using that builtin rather than wrapping the
# script in stdbuf -oL is more reliable, since there's no guarentee
# that awk even uses libc's stdio facilities.

/^<[0-9]{1,3}>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9 ]{2} [0-9]{2}(:[0-9]{2}){2} / {
	sub(/^<[0-9]{1,3}>/, "&&", $0);
	sub(/<[0-9]{1,3}>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9 ]{2} [0-9]{2}(:[0-9]{2}){2} /, "", $0);
}
/./ {print; fflush(); }
